package com.cisco.nesal.plugin;

import com.cisco.nesal.agent.SmartAgentException;

/**
 * The Communication interface provides the interface between the Smart Agent
 * and client transport layer component such as call home transport which sends
 * license information to Cisco backend service and receive response from Cisco
 * backend service.
 */
public interface ICommunication {

    /**
     * Message type when communicating with licensing backend via
     * ICommunication.sendMessage method.
     * 
     */
    public enum MessageType {
        /** invalid */
        SmartAgentMessageInvalid,
        /** REGISTRATION */
        SmartAgentMessageReg,
        /** DEREGISTRATION */
        SmartAgentMessageUnReg,
        /** ENTITLEMENT */
        SmartAgentMessageAUTH,
        /** USAGE */
        SmartAgentMessageMETER,
        /** ACKNOWLEDGEMENT */
        SmartAgentMessageACK,
        /** RENEW */
        SmartAgentMessageRenew,
        /** GETRESP */
        SmartAgentMessageGETRESPONSE;
    }

    /**
     * Initializes the communications layer.
     * <p>
     * This method will be called after the agent determines the software
     * product has been fully initialized by calling the software Product
     * Independent initialization method.
     * <p>
     * If the init method fails the agent will retry every 1 minute.
     * 
     * @throws SmartAgnetException
     *             On an error the exception will contain error code and
     *             message.
     */
    public void init() throws SmartAgentException;

    /**
     * Sends message to licensing backend. This is the common API that Smart
     * Agent can use to send all types of smart agent license message
     * SmartAgentMessage_t through transport layer to Cisco backend Service.For
     * example, we can invoke Call Home client message send API here.
     * <p>
     * The license message data that generated by smart agent will be contained
     * in the messageData string.
     * <p>
     * The response message received from Cisco backend service through client
     * transport will be contained in the returned string and passed to Smart
     * Agent.
     * 
     * @param messageType
     *            Smart Agent message type.
     * @param messageData
     *            Data in string format that holds the license message.
     * @param idToken
     *            The idToken used for registration. This is needed by call home
     *            and will be passed only when we send the first register
     *            message.
     * 
     * @return A string containing the response message data.
     * 
     * @throws SmartAgentException
     *             On an error the exception will contain error code and
     *             message.
     */
    public String sendMessage(MessageType messageType, String messageData,
            String idToken) throws SmartAgentException;

    /**
     * Shuts down the communications layer.
     * <p>
     * This will be called if the agent is disabled or shut down gracefully.
     */
    public void shutdown();

}
